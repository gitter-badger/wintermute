/*
 * Wintermute is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * Wintermute is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with Wintermute; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#ifndef WINTERMUTE_CORE_GLOBALS_HPP
#define WINTERMUTE_CORE_GLOBALS_HPP

#include "wintermutecore_export.h"
#include <cassert>
#include <cstdlib>
#include <cstdio>
#include <cxxabi.h>
#include <initializer_list>
#include <memory>
#include <stdexcept>
#include <string>
#include <sys/types.h>
#include <type_traits>
#include <unistd.h>

using std::string;

// Variables we'd use
#define WINTERMUTE_LOGGER_ROOT_NAME "root"
#define WINTERMUTE_PLUGIN_METHOD_CTOR_NAME "w_plugin_create"
#define WINTERMUTE_PLUGIN_METHOD_DTOR_NAME "w_plugin_destroy"

#ifdef WINTERMUTE_EXPORT
# undef WINTERMUTE_EXPORT
# define WINTERMUTE_EXPORT         __attribute__ ((visibility ("default")))
# define WINTERMUTE_EXPORT_PRIVATE __attribute__ ((visibility ("hidden")))
#else
# define WINTERMUTE_EXPORT
# define WINTERMUTE_EXPORT_PRIVATE
#endif

// {{{ Private + Public Accessors

#define UniquePtr  ::std::unique_ptr
#define SharedPtr  ::std::shared_ptr

#define W_DECLARE_SHAREABLE(Class) public std::enable_shared_from_this<Class>

#define W_DECLARE_PTR_TYPE(Class) \
  typedef SharedPtr<Class> Ptr; \
  inline Ptr getptr() { return shared_from_this(); }

#define W_CLAIM_SHARED_PTR(Statement) (Statement)->getptr()

#define W_DEFINE_PRIVATE(Class) \
  friend class Class##Private; \
  inline Class##Private* d_func() const { return d_ptr.get(); } \
  inline Class##Private* d_func() { return d_ptr.get(); } \
  SharedPtr<Class##Private> d_ptr = nullptr;

#define W_PRV(Class) Class##Private* const d = d_func();

#define W_DEFINE_PUBLIC(Class) \
  inline Class* q_func() const { return q_ptr.get(); } \
  inline Class* q_func() { return q_ptr.get(); } \
  friend class Class; \
  SharedPtr<Class> q_ptr;

#define W_PUB(Class) Class* const q = q_func();

// }}}

// {{{ Singleton class access
#define W_DEFINE_SINGLETON(Class) \
  private: \
    static SharedPtr<Class> _instance; \
  public: \
    static inline SharedPtr<Class> instance() { \
      if (!_instance) { \
        _instance.reset(new Class()); \
      } \
      return _instance;  \
    }

#define W_DECLARE_SINGLETON(Class) SharedPtr<Class> Class::_instance(nullptr);
#define wbool2str(booleanExpr) (booleanExpr ? "true" : "false")

// }}}

// {{{ Platform-specific types
namespace Wintermute
{
typedef ::pid_t PID;
}

// }}}

// {{{ Functions to help the process
void w_noop(void);
// }}}

#define __pure __attribute__((pure))
#define __hot __attribute__((hot))
#define __cold __attribute__((cold))

#define WINTERMUTE_ENV_PLUGIN_PATH "WINTERMUTE_PLUGIN_PATH"
#define WINTERMUTE_ENV_LOG_LEVEL   "WINTERMUTE_LOG_LEVEL"

#endif // end globaldef

// vim: set fdm=syntax :
