#ifndef WINTERMUTE_CORE_GLOBALS_HPP
#define WINTERMUTE_CORE_GLOBALS_HPP

#include <unistd.h>
#include <tr1/memory>

#cmakedefine01 Backtrace_FOUND
#if Backtrace_FOUND
# include <${Backtrace_HEADER}>
#endif

#define W_DEFINE_PRIVATE(Class) \
  inline Class##Private* d_func() const { return d_ptr.get(); } \
  inline Class##Private* d_func() { return d_ptr.get(); } \
  friend class Class##Private; \
  SharedPtr<Class##Private> d_ptr;

#define W_PRV(Class) Class##Private* const d = d_func();

#define W_DEFINE_PUBLIC(Class) \
  inline Class* d_func() const { return q_ptr.get(); } \
  inline Class* d_func() { return q_ptr.get(); } \
  friend class Class; \
  SharedPtr<Class> q_ptr;

#define W_PUB(Class) Class* const d = q_func();

#define UniquePtr  ::std::tr1::unique_ptr
#define SharedPtr  ::std::tr1::shared_ptr

namespace Wintermute
{
typedef ::pid_t PID;
}

#include "wintermutecore_export.h"

#endif
